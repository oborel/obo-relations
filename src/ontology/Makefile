OBO=http://purl.obolibrary.org/obo
SRC=ro-edit.owl
ROBOT=robot
REPORT_FAIL_ON = ERROR
RELEASEDATE ?= `date +%Y-%m-%d`

ONTS_TO_BUILD= ro.obo ro.owl ro.json ro-base.owl ro-base.obo ro-base.json chemical.owl annotations.owl other_import.owl core.owl go-biotic.owl pato_import.owl temporal-intervals.owl bfo-axioms.owl bfo-classes-minimal.owl el-constraints.owl go_mf_import.owl go_cc_import.owl  generated-axioms.owl
ONTS= $(ONTS_TO_BUILD) rohom.owl

# ========================================
# PRODUCTION
# ========================================

all: build

test:
	robot reason -r HermiT -i ro-edit.owl

build: ro.owl ro.obo ro.json  all_subsets

release: $(ONTS_TO_BUILD)
	cp -pr catalog-v001.xml $(ONTS) subsets ../..

# fairly dump release process whilst waiting for Oort - check than versionIRI has been entered manually.
ro.owl: ro-edit.owl core.owl temporal-intervals.owl validate-using-oort
	owltools --use-catalog $<  --set-ontology-id -v $(OBO)/ro/releases/$(RELEASEDATE)/ro.owl $(OBO)/ro.owl -o file://`pwd`/$@
#	grep versionIRI $< && (echo "check the version:" && echo versionIRI: `grep versionIRI $<` && cp $< $@) || echo 'You must set the versionIRI!!'

# turtle file is merged, for querying via arq
ro.ttl: ro.owl
	owltools --use-catalog $< --merge-import-closure -o -f ttl $@.tmp && mv $@.tmp $@

EXT_IMPORTS = pato_import go_cc_import go_mf_import go-biotic other_import annotations

ro-base.owl: ro-edit.owl
	owltools --use-catalog $< $(patsubst %, --remove-import-declaration $(OBO)/ro/%.owl, $(EXT_IMPORTS)) --merge-imports-closure --set-ontology-id -v $(OBO)/ro/releases/$(RELEASEDATE)/$@ $(OBO)/ro/$@ -o $@

%.obo: %.owl
	owltools --use-catalog $< --merge-import-closure -o -f obo $@.tmp && mv $@.tmp $@

%.json: %.owl
	owltools --use-catalog $< --merge-import-closure -o -f json $@.tmp && mv $@.tmp $@

%-sh.obo: %.owl
	owltools --use-catalog $< --merge-import-closure --add-obo-shorthand-to-properties -o -f obo $@.tmp && grep -v ^owl-axioms $@.tmp >  $@

# soon this will be incorporated into Oort
ro-el.owl: ro.owl
	makeElWithoutReasoning.sh -i `pwd`/$< -o `pwd`/$@

# note we don't do anything with the generated ontology, this is just for checking purposes.
validate-using-oort: ro-edit.owl
	ontology-release-runner  --catalog-xml catalog-v001.xml --outdir build --simple --allow-overwrite --reasoner hermit ro-edit.owl
	touch $@

# ========================================
# DOCUMENTATION
# ========================================
# requires mkdocs: `pip install mkdocs`
docs-serve:
	(cd ../.. && mkdocs serve)
docs-deploy:
	(cd ../.. && mkdocs gh-deploy)


# ========================================
# DIFFS
# ========================================
ro-lastbuild.owl: ro-edit.owl
	wget --no-check-certificate $(OBO)/ro.owl -O $@

ro-diff.md: ro.owl ro-lastbuild.owl 
	owljs-diff -o $@ ro-lastbuild.owl $<
ro-diff.html: ro-diff.md
	pandoc $< -o $@

# ========================================
# IMPORTS
# ========================================
seed.txt: $(SRC)
	$(ROBOT) query -f csv -i $< --query sparql/terms.sparql $@

imports/%_terms_combined.txt: seed.txt
	cat $< imports/$*_terms.txt | sort | uniq >  $@

%_import.owl: mirror/%.owl imports/%_terms.txt
	$(ROBOT) extract -i $< -T imports/$*_terms.txt --method BOT -O $(BASE)/$@ -o $@
.PRECIOUS: imports/%_import.owl

mirror/%.owl:
	wget --no-check-certificate $(OBO)/$*.owl -O $@

# ========================================
# MIREOT
# ========================================

bfo2-classes.owl:
	owltools $(OBO)/bfo.owl --make-subset-by-properties // --set-ontology-id $(OBO)/ro/bfo2-classes.owl -o file://`pwd`/bfo2-classes.owl

# ========================================
# SUBSETS
# ========================================
SUBSETS = interaction sequence time-interval mereotopology causal developmental eco hom
all_subsets: all_subsets_owl all_subsets_obo
all_subsets_owl: $(patsubst %,subsets/ro-%.owl,$(SUBSETS))
all_subsets_obo: $(patsubst %,subsets/ro-%.obo,$(SUBSETS)) subsets/ro-chado.obo

# generated by oort:
subsets/ro-eco.owl: build/subsets/ro-eco.owl
	owltools --use-catalog $< --remove-dangling -o $@


subsets/ro-biotic-interaction.owl: ro.owl
	robot filter -i $< --term RO:0002437 --select "annotations self descendants" -o $@.tmp.owl && mv $@.tmp.owl $@

# the following subsets are generated purely by hierarchy:
subsets/ro-interaction.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'interacts with' // --set-ontology-id $(OBO)/ro/$@ -o $@
subsets/ro-sequence.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'sequentially related to' // --set-ontology-id $(OBO)/ro/$@ -o $@
subsets/ro-time-interval.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'temporally related to' // --set-ontology-id $(OBO)/ro/$@ -o $@
subsets/ro-mereotopology.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'mereotopologically related to' // --set-ontology-id $(OBO)/ro/$@ -o $@
subsets/ro-causal.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'causally related to' // --set-ontology-id $(OBO)/ro/$@ -o $@
subsets/ro-developmental.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'developmentally related to' // --set-ontology-id $(OBO)/ro/$@ -o $@
#subsets/ro-eco.owl: ro.owl
#	owltools --use-catalog $< --extract-properties -s --list 'ecologically related to' // --set-ontology-id $(OBO)/ro/$@ -o $@
subsets/ro-hom.owl: ro.owl
	owltools --use-catalog $< --extract-properties -s --list 'in similarity relationship with' // --set-ontology-id $(OBO)/ro/$@ -o $@

subsets/%.csv: subsets/%.owl
	robot query -i $< -s sparql/objectProperties.sparql $@.tmp -f csv && mv $@.tmp $@


subsets/ro-chado.obo: ro.obo
	owltools --use-catalog $< --merge-imports-closure --remove-tbox --remove-annotation-assertions -r -l -s -d --remove-dangling --set-ontology-id $(OBO)/ro/$@ -o -f obo $@.tmp && ../tools/translate-to-chado-obo.pl $@.tmp > $@

# ========================================
# REPORTING (EXPERIMENTAL)
# ========================================
# requires sparqlprog

usage.tsv: ro-base.owl
	pq-ontobee -f tsv -e -i $<  "owl:objectProperty(P), label(P,PN), (ontobee ?? aggregate_group(count(Restr),[P,G],rdf(Restr,owl:onProperty,P,G),Num))" "x(P,PN,G,Num)" > $@.tmp && mv $@.tmp $@
usage-full.tsv:
	pq-ontobee -f tsv -e -i ro.owl  "owl:objectProperty(P), (ontobee ?? rdf(Restr,owl:onProperty,P,G),label(P,PN))" "x(Restr,P,PN,G)" > $@.tmp && mv $@.tmp $@

# ========================================
# EXPERIMENTAL
# ========================================

# Oort requires more testing before it can be used for a relations ontology.
#  for now, just go with a simple release process (see above)
build-using-oort: ro-edit.owl
	ontology-release-runner --catalog-xml catalog-v001.xml --outdir build --simple --allow-overwrite --reasoner hermit ro-edit.owl
	touch $@

hom.obo:
	wget $(OBO)/hom.obo -O $@.tmp && mv $@.tmp $@
hom-fixed.obo: hom.obo
	obo-grep.pl --neg -r is_obsolete: $< > $@.tmp && mv $@.tmp $@

rohom.obo: hom-fixed.obo
	../tools/hom2rhom.pl $< > $@.tmp && mv $@.tmp $@
rohom.owl: rohom.obo
	owltools $< -o $@.tmp && grep -v 'oboInOwl:id' $@.tmp > $@.tmp2 && $(HOME)/repos/uberon/util/expand-dbxref-literals.pl $@.tmp2 > $@

## ODPs

odp/%.owl:
	wget http://www.ontologydesignpatterns.org/cp/owl/$*.owl -O $@


# ----------------------------------------
# Reports
# ----------------------------------------
REPORTS=basicReport
all_reports: $(patsubst %, reports/envo-%.csv, $(REPORTS)) reports/ro.owl-obo-report.tsv

reports/ro-%.csv: sparql/%.sparql ro.owl
	robot query -i ro.owl -s $< $@.tmp -f csv && mv $@.tmp $@

# SPARQL constructs
reports/ro-%.ttl: sparql/%.sparql ro.owl
	robot query -i ro.owl -c $< $@.tmp.ttl -f ttl && robot annotate -i $@.tmp.ttl -O $(OBO)/ro/$@ -o $@

views/%.owl: sparql/%.sparql ro.owl
	robot merge -i ro.owl query -c $< $@.tmp.ttl -f ttl && robot annotate -i $@.tmp.ttl -O $(OBO)/ro/$@ -o $@

gen-%.owl: sparql/construct-%.sparql ro.owl
	robot query -i ro.owl -c $< $@.tmp.ttl -f ttl && robot annotate -i $@.tmp.ttl -O $(OBO)/ro/$@ -o $@

# See https://github.com/oborel/obo-relations/pull/270
GENAXIOMS = gen-universal-from-homeomorphy.owl
generated-axioms.owl: $(GENAXIOMS)
	robot merge $(patsubst %, -i %, $(GENAXIOMS)) -o $@.tmp.ttl && robot annotate -i $@.tmp.ttl -O $(OBO)/ro/$@ -o $@

# generate includes from sparql CONSTRUCT queries;
# these can then be merged in to the main ontology
#reports/include-%.owl: sparql/construct-%.sparql ecto-core.owl

# ----------------------------------------
# ROBOT report
# ----------------------------------------
reports/%-obo-report.tsv: %
	$(ROBOT) merge --collapse-import-closure true -i $< report --labels true --fail-on $(REPORT_FAIL_ON) --print 5 -o $@

# ----------------------------------------
# MARKDOWN EXPORT
# ----------------------------------------
markdown: ro.owl
	owltools $< --merge-imports-closure --ontology-to-markdown -l 0 md

